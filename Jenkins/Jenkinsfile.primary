#!groovy

def SUCCESS_MESSAGE_OUTPUT_COLOR = '\033[1;32m'
def FAILURE_MESSAGE_OUTPUT_COLOR = '\033[0;31m'

final EMPTY_COMMIT_TAG = "empty_commit_tag"
final DEFAULT_IMAGE_TAG = "latest"

/**
* @returns current commit tag, empty string if latest tag is null.
*/
def getCommitTag() { 
    /* 
    * NOTE: Make sure you have the following plugins installed: 
    * GitHub Branch Source: https://github.com/jenkinsci/github-branch-source-plugin
    * and "Branch Build" Jenkins plugins installed.
    */

     // NOTE: Getting short hash of the commit. Use %H (capital) for full hash.

    def tag = sh(script: "git log --pretty=format:'%h' -n 1", returnStdout: true).trim();
    if (tag == null) { 
        tag = EMPTY_COMMIT_TAG;
    }
    return tag 
}

def isImageWithTagExistInRegistry(imageName, imageTag="") {
    if (imageTag == "") {
        imageTag = DEFAULT_IMAGE_TAG;
    }
    isExist = false;
    echo "Checking $imageName:$imageTag in the registry..."
     try {
         // NOTE: Requires 'Docker' Jenkins plugin. Documentation: https://go.cloudbees.com/docs/plugins/docker-workflow/
        docker.image("$imageName:$imageTag").withRun("") { test ->
            isExist = true;
        }
    } catch (ex) {
        isExist = false;
    } 
    return isExist;
}

isImageExistInRegistry = false;

pipeline {
    /* The agent directive, which is required, instructs Jenkins to allocate an executor and workspace for the Pipeline */        
    // NOTE: Using different agent on different jobs 
    agent none

    stages {
        stage("Test Slack Notifications Send") {
            steps {
                script {
                    def attachments = [
                            [
                                    text: 'I find your lack of faith disturbing!',
                                    fallback: 'Hey, Vader seems to be mad at you.',
                                    color: '#ff0000'
                            ]
                    ]

                    slackSend(channel: '#testing-jenkins-ci-with-slack.', attachments: attachments)
                    throw new Exception("Pipeline termination test.")

                }
            }
        }
        stage('Registry check') {
            // NOTE: Checking registry for existing image
           agent any
           steps {
               script {


                   final ANOTHER_PIPELINE_NAME_MOCK = "test-pipeline";
                   build "${ANOTHER_PIPELINE_NAME_MOCK}" // TODO: try to invoke other pipeline from the current one.
                   throw new Exception("Pipeline termiantion exception. TODO: Remove it.");

                   def tag = getCommitTag();
                   if (tag == EMPTY_COMMIT_TAG) { 
                       final latestTag = "latest";
                       tag = DEFAULT_IMAGE_TAG;
                    }
                    final darzeeImageName = "emcmongoose/darzee";
                    def isImageExistInRegistry = isImageWithTagExistInRegistry(darzeeImageName, tag)
                    echo "Is Darzee exist in registry? $isImageExistInRegistry"
                    echo "Is image exist in registry? $isImageExistInRegistry"
                    echo "Docker check.."
                    sh(script: "docker ps", returnStdout: true);
                }
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                script {
                    sh 'mvn clean compile -DskipTests  assembly:single package'
                }
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
                success {
                    echo '${SUCCESS_MESSAGE_OUTPUT_COLOR} Tests have successfully passed.'
                }
                failure {
                    echo '${FAILURE_MESSAGE_OUTPUT_COLOR} Tests have failed.'
                }
            }
        }
        stage('Deploy') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            when {
                branch 'master'
            }
            steps {
                script { 
                    sh 'mvn -s .m2/settings.xml --batch-mode deploy'
                }
            }
        }
    }
    post {
        failure {
            script {
                // NOTE: In case job in step 1 has failed, it executes AFTER all the other jobs.
                echo "Caught failure."
            }
        }
    }
}
