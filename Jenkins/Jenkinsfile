#!groovy

def SUCCESS_MESSAGE_OUTPUT_COLOR='\033[1;32m'
def FAILURE_MESSAGE_OUTPUT_COLOR='\033[0;31m'
pipeline {
    /* The agent directive, which is required, instructs Jenkins to allocate an executor and workspace for the Pipeline */
    agent {
        docker {
            image 'maven:3-alpine'
            /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
             ... short-lived Maven Docker container and that of your Docker hostâ€™s filesystem */
             /* As far as I understand, this is something like cache in docker multistage building. */
            args '-v /root/.m2:/root/.m2'
        }
    }
    stages {
        stage('Build') {
            steps {
                script { 
                    sh "git tag -- contains | head -1""
                    def tag = sh(returnsStdout: true, script: "git tag -- contains | head -1").trim()
                    echo "tag is $tag"
                    echo "Change ID is $env.CHANGE_ID"
                }
                sh 'mvn clean compile -DskipTests  assembly:single package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
                success {
                    echo '${SUCCESS_MESSAGE_OUTPUT_COLOR} Tests have successfully passed.'
                }
                failure {
                    echo '${FAILURE_MESSAGE_OUTPUT_COLOR} Tests have failed.'
                }
            }
        }
        stage('Deploy') {
            when {
                branch 'master'
            }
            steps {
                sh 'mvn -s .m2/settings.xml --batch-mode deploy'
            }
        }
    }
}
