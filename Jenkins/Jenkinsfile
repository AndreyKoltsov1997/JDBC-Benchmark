#!groovy

def SUCCESS_MESSAGE_OUTPUT_COLOR = '\033[1;32m'
def FAILURE_MESSAGE_OUTPUT_COLOR = '\033[0;31m'
pipeline {
    /* The agent directive, which is required, instructs Jenkins to allocate an executor and workspace for the Pipeline */

    // NOTE: Using different agent on different jobs 
    agent none
    stages {

        stage('Registry check') {
            // NOTE: Checking registry for existing image
            agent {
                docker { 
                    image 'maven:3.6.1-jdk-11' 
                    args '-v /root/.m2:/root/.m2'
                    }
            }
            steps {
                script {
                    /* 
                   NOTE: Make sure you have the following plugins installed: 
                   * GitHub Branch Source: https://github.com/jenkinsci/github-branch-source-plugin
                   * and "Branch Build" Jenkins plugins installed.
                   */

                //    NOTE: Getting short hash of the commit. Use %H (capital) for full hash.
                    sh "git log --pretty=format:'%h' -n 1"
                    def tag = sh(script: "git log --pretty=format:'%h' -n 1", returnStdout: true)
                    // NOTE: Requires 'Docker' Jenkins plugin. DOcumentation: https://go.cloudbees.com/docs/plugins/docker-workflow/

                    docker.withTool("default") { 
                        sh "docker images" 
                    }
                    def dockerImageInstance = docker.image('emcmongoose/darzee:imnotexisting')
                    echo "dockerImageInstance: $dockerImageInstance"
                    // def existingImageTag = sh(script: "docker images -q emcmongoose/darzee:latest", returnStdout: true)
                    // echo "existingImageTag ${existingImageTag}"
                    // def isImageExistInRegistry = (existingImageTag == '')
                    // echo "tag is $tag"
                    // echo "Is Darzee image exist? $isImageExistInRegistry"
                }
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn clean compile -DskipTests  assembly:single package'
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
                success {
                    echo '${SUCCESS_MESSAGE_OUTPUT_COLOR} Tests have successfully passed.'
                }
                failure {
                    echo '${FAILURE_MESSAGE_OUTPUT_COLOR} Tests have failed.'
                }
            }
        }
        stage('Deploy') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            when {
                branch 'master'
            }
            steps {
                sh 'mvn -s .m2/settings.xml --batch-mode deploy'
            }
        }
    }
}
