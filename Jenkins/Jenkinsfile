#!groovy

def SUCCESS_MESSAGE_OUTPUT_COLOR = '\033[1;32m'
def FAILURE_MESSAGE_OUTPUT_COLOR = '\033[0;31m'

final EMPTY_COMMIT_TAG = "empty_commit_tag"
final DEFAULT_IMAGE_TAG = "latest"

/**
* @returns current commit tag, empty string if latest tag is null.
*/
def getCommitTag() { 
    /* 
    * NOTE: Make sure you have the following plugins installed: 
    * GitHub Branch Source: https://github.com/jenkinsci/github-branch-source-plugin
    * and "Branch Build" Jenkins plugins installed.
    */

     // NOTE: Getting short hash of the commit. Use %H (capital) for full hash.

    def tag = sh(script: "git log --pretty=format:'%h' -n 1", returnStdout: true).trim();
    if (tag == null) { 
        tag = EMPTY_COMMIT_TAG;
    }
    return tag 
}

def isImageWithTagExistInRegistry(imageName="", imageTag="") { 
    isExist = false;
    echo "Checking $imageName:$imageTag in the registry..."
     try {
         // NOTE: Requires 'Docker' Jenkins plugin. Documentation: https://go.cloudbees.com/docs/plugins/docker-workflow/
        docker.image("$imageName:$imageTag").withRun("") { test ->
            isExist = true;
        }
    } catch (ex) {
        isExist = false;
    } 
    return isExist;
}

isImageExistInRegistry = false; 

pipeline {
        /* The agent directive, which is required, instructs Jenkins to allocate an executor and workspace for the Pipeline */
            
    // NOTE: Using different agent on different jobs 
    agent none

    stages {


        stage('Test Parallel Work') {
            parallel {
                stage("Job 1") {
                    steps {
                        script {
                            echo "Job 1 is executing. Throwing exception..."
                            catchError {
                                throw new Exception("Job 1 exception")
                            }

                        }
                    }
                }
                post {
                    failure {
                        script {
                           echo "[POST-stage1 block] Stage 1 has failed."
                        }
                    }
                }
                stage("Job 2") {
                    steps {
                        script {
                            echo "Job 2 is executing."
                        }
                    }
                }
                stage("Job 3") {
                   steps {
                       script {
                           echo "Job 3 is executing."
                       }
                   }
                }
            }
        }
            stage('Registry check') {
                // NOTE: Checking registry for existing image
            agent any
            steps {

                script {
                    def tag = getCommitTag();
                    if (tag == EMPTY_COMMIT_TAG) { 
                        final latestTag = "latest";
                        tag = DEFAULT_IMAGE_TAG;
                    }
                    final darzeeImageName = "emcmongoose/darzee";
                    def isImageExistInRegistry = isImageWithTagExistInRegistry(darzeeImageName, tag)
                    echo "Is Darzee exist in registry? $isImageExistInRegistry"
                    // try {
                    //     final darzeeImageName = "emcmongoose/darzee";
                    //     // NOTE: Requires 'Docker' Jenkins plugin. DOcumentation: https://go.cloudbees.com/docs/plugins/docker-workflow/
                    //     docker.image("$darzeeImageName:$tag").withRun("") { test ->
                    //         params.isImageExistInRegistry = true;
                    //     }
                    // } catch (ex) {
                    //     isImageExistInRegistry = false;
                    // } 
                    echo "Is image exist in registry? $isImageExistInRegistry"
                    echo "Docker check.."
                    sh(script: "docker ps", returnStdout: true);
                }
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn clean compile -DskipTests  assembly:single package'
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
                success {
                    echo '${SUCCESS_MESSAGE_OUTPUT_COLOR} Tests have successfully passed.'
                }
                failure {
                    echo '${FAILURE_MESSAGE_OUTPUT_COLOR} Tests have failed.'
                }
            }
        }
        stage('Deploy') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    /* creates a reciprocal mapping between the /root/.m2 (i.e. Maven repository) directories in the ...
                    ... short-lived Maven Docker container and that of your Docker host’s filesystem */
                    /* As far as I understand, this is something like cache in docker multistage building. */
                    args '-v /root/.m2:/root/.m2'
                }
            }
            when {
                branch 'master'
            }
            steps {
                sh 'mvn -s .m2/settings.xml --batch-mode deploy'
            }
        }
    }
    post {

        failure {
            script {
                // NOTE: In case job in step 1 has failed, it executes AFTER all the other jobs.
                echo "Caught failure."
            }
        }
    }
}
