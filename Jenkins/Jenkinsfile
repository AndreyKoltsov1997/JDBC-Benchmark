#!groovy

def SUCCESS_MESSAGE_OUTPUT_COLOR = '\033[1;32m'
def FAILURE_MESSAGE_OUTPUT_COLOR = '\033[0;31m'

final EMPTY_COMMIT_TAG = "empty_commit_tag"
final DEFAULT_IMAGE_TAG = "latest"

pipeline {
    /* The agent directive, which is required, instructs Jenkins to allocate an executor and workspace for the Pipeline */        
    // NOTE: Using different agent on different jobs 
    agent any

    stages {
        stage("YAML file tests") {
            steps {
                script {
                    def testFile = readFile("${env.WORKSPACE}/test.yaml")
                    echo "testFile: $testFile"
                    def newCountry = "USA"
                    testFile = testFile.replaceFirst(/country: '.*'/, "country: '${newCountry}'")
                    echo "Updated YAML file: $testFile"

                    def testFileInfo = readYaml(file: "${env.WORKSPACE}/test.yaml")
                    echo "Test file info: $testFileInfo"
                    echo "testFileInfo.country: $testFileInfo.country"
                    testFileInfo.country = "Canada"
                    echo "Updated testFileInfo.country: $testFileInfo.country"
                    testFileInfo.nonExistingField = "I do not exist."
                    echo "testFileInfo.nonExistingField: $testFileInfo.nonExistingField"

                    fileDeleteOperation("${env.WORKSPACE}/test.yaml", '')
                    writeYaml(file: "${env.WORKSPACE}/test.yaml", data: testFileInfo)

                    def updatedFile = readFile("${env.WORKSPACE}/test.yaml")
                    echo "Updated file content: $updatedFile"


                }
            }
        }
    }
    post {
        failure {
            script {
                // NOTE: In case job in step 1 has failed, it executes AFTER all the other jobs.
                echo "Caught failure."
            }
        }
    }
}
